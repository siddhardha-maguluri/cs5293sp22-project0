# All the rule numbers and rules of the grammar are stored as key, values
# Empty string is denoted by a single double quote(") symbol

production_rules = {
    '1': '<scala>-><packages> <imports> <scala-body>',
    '2': '<packages>->package [id] ; <packages>',
    '3': '<packages>->"',
    '4': '<imports>->import [id] ; <imports>',
    '5': '<imports>->"',
    '6': '<scala-body>-><subbody> <scala-body>',
    '7': '<scala-body>->"',
    '8': '<subbody>-><modifier> <subbody-tail>',
    '9': '<modifier>->abstract',
    '10': '<modifier>->final',
    '11': '<modifier>->sealed',
    '12': '<modifier>->private',
    '13': '<modifier>->protected',
    '14': '<subbody-tail>-><tail-type> <block>',
    '15': '<tail-type>->class',
    '16': '<tail-type>->object',
    '17': '<block>->{ <stmts> }',
    '18': '<stmts>-><stmt> ; <stmts>',
    '19': '<stmts>->"',
    '20': '<stmt>-><dcl>',
    '21': '<stmt>-><asmt>',
    '22': '<stmt>-><if>',
    '23': '<stmt>-><while>',
    '24': '<stmt>-><case>',
    '25': '<stmt>-><in>',
    '26': '<stmt>-><out>',
    '27': '<stmt>-><return>',
    '28': '<stmt>-><block>',
    '29': '<dcl>->val <dcl-tail>',
    '30': '<dcl>->def [id] ( <ids> ) <block>',
    '31': '<dcl-tail>-><ids> : <type>',
    '32': '<ids>->[id] <more-ids>',
    '33': '<more-ids>->, [id] <more-ids>',
    '34': '<more-ids>->"',
    '35': '<type>->int',
    '36': '<type>->real',
    '37': '<type>->bool',
    '38': '<asmt>->[id] <= <expr>',
    '39': '<if>->if ( <expr> ) <stmt> ; else <stmt>',
    '40': '<while>->while ( <expr> ) <stmt>',
    '41': '<case>->case [id] = <expr> => <stmt>',
    '42': '<in>->in ( <ids> )',
    '43': '<out>->print ( <ids> )',
    '44': '<return>->return ( <expr> )',
    '45': '<expr>-><arith-expr>',
    '46': '<expr>-><bool-expr>',
    '47': '<arith-expr>->[id] <arith>',
    '48': '<arith-expr>->[Constant] <arith>',
    '49': '<arith-expr>->( <arith-expr> ) <arith>',
    '50': '<arith>->+ <arith-expr>',
    '51': '<arith>->* <arith-expr>',
    '52': '<arith>->"',
    '53': '<bool-exp>->not ( <bool-expr> ) <bool>',
    '54': '<bool-exp>->true <bool>',
    '55': '<bool-exp>->false <bool>',
    '56': '<bool-exp>->@ <arith-expr> <arith-expr>',
    '57': '<bool>->and <bool-expr>',
    '58': '<bool>->or <bool-expr>',
    '59': '<bool>->"'
}